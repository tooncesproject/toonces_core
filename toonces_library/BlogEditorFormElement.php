<?php
/*
 * BlogEditorFormElement
 * Initial commit: Paul Anderson 2/21/2016
 * 
 * Extends BlogFormElement for updating existing blog posts.
 * 
 */

class BlogEditorFormElement extends BlogFormElement implements iElement
{

	public $updatedBlogPostTitle;
	public $blogPostId;

	public function checkPathExistence($paramName) { 

		if (isset($this->conn) == false)
			$this->conn = UniversalConnect::doConnect();

		$queryParams = array (
				':pageId' => strval($this->pageViewReference->pageId)
				,':pathname' => $paramName
		);

		$sql = <<<SQL
					SELECT
						CASE
							WHEN count(*) = 0 THEN 0
							WHEN count(*) > 0 THEN 1
						END
					FROM
						toonces.page_hierarchy_bridge phb
					JOIN
						toonces.page_hierarchy_bridge phb2 ON phb.page_id = phb2.page_id

					JOIN
						toonces.pages tp ON tp.page_id = phb2.descendant_page_id
					WHERE
						phb.descendant_page_id = :pageId
					AND
						tp.pathname = GENERATE_PATHNAME(:pathname)
					AND
						tp.page_id != :pageId;
SQL;
		$stmt = $this->conn->prepare($sql);
		$stmt->execute($queryParams);
		$result = $stmt->fetch(PDO::FETCH_NUM);
		$pageNameExists = intval($result[0]);

		return $pageNameExists;

	}

	function queryBlog() {

		if (!isset($this->conn))
			$this->conn = UniversalConnect::doConnect();

		$query = sprintf(file_get_contents(ROOTPATH.'/sql/retrieve_single_blog_post.sql'),$this->pageViewReference->pageId);
		$result = $this->conn->query($query);
		return $result;

	}

	public function responseStateHandler($responseState) {

		switch ($responseState) {
			case 0: 
				// If no title change, exit edit mode.
				$path = '/'.$this->pageViewReference->urlPath;
				$this->send303($path);
				break;
			case 1:
				// Title change detected, ask if url change is desired.
				$checkTitle = urlencode($this->updatedBlogPostTitle);
				$path = $this->pageViewReference->urlPath;
				$path = '/'.$path.'?mode=urlcheck&newtitle='.$checkTitle;
				$this->send303($path);
				break;
			case 2:
				// Title change detected but title already exists
				$this->storeMessage("Oops! That didn't work.");
				$this->inputArray['title']->storeMessage('Sorry, this blog already has a page with the URL generated by that title. Please choose a different title.');
				$this->send303();
			case 3:
				// Update failed because blog was empty
				$this->storeMessage("Oops! That didn't work.");
				$this->send303();

		}
	}

	public function elementAction() {

		$doAttemptPost = true;
		$newPageId = 0;
		$this->textareaValueVarName = $this->formName.'_tav';

		// Query the existing data.
		$result = $this->queryBlog();
		foreach($result as $row) {

			$this->blogPostTitle = $row['title'];
			$this->textareaValue = $row['body'];
			$this->blogPostId = $row['blog_post_id'];

		}

		if ($this->postState == false) {
				$this->generateFormHTML();
		} else {
			// If there is POST data, validate and update.

			if (!isset($this->conn))
				$this->conn = UniversalConnect::doConnect();

			// Get the input data
			$titleInput = $this->inputArray['title'];
			$title = filter_var($titleInput->postData,FILTER_SANITIZE_STRING);

			$bodyInput = $this->inputArray['body'];
			$body = filter_var($bodyInput->postData,FILTER_SANITIZE_STRING);

			// Validate input data:
			// If title is empty, default to the existing title.
			if (empty($title) == true) {
				$title = $this->blogPostTitle;
			} 

			// If body is empty, nag the user.
			if (empty($body) == true) {
				$bodyInput->storeMessage('Please enter some text in your blog post.');
				$doAttemptPost = false;
				$bodyInput->storeValue($body);
				$this->responseStateHandler(3);
			}

			// Otherwise, go ahead and update the blog content.
			if ($doAttemptPost == true) {

				$queryParams = array (
						 ':body' => $body
						,':blogPostId' => $this->blogPostId 
				);

				$sql = <<<SQL
					UPDATE toonces.blog_posts
					SET body = :body
					WHERE blog_post_id = :blogPostId
SQL;

				$stmt = $this->conn->prepare($sql);
				$stmt->execute($queryParams);

				// If there's no change to the title, response state 0 (OK, go to post).
				// Otherwise, check for pathname existence.
					// If path doesn't exist: state 1 (Check for URL change)
					// If it does: state 2 (error and retry)
				if ($title == $this->blogPostTitle) {
					$this->responseStateHandler(0);
				} else if ($this->checkPathExistence($title) == false) {
					$this->updatedBlogPostTitle = $title;
					$this->responseStateHandler(1);
				} else {
					$this->responseStateHandler(2);
				}
			}
		}
	}

	public function objectSetup() {

		$this->htmlHeader = '<div class="form_element>';
		$this->htmlFooter = '</div>';
		$this->formName = 'blogPostForm';

		$this->submitName = 'Save';
		// Instantiate input objects
		$this->buildInputArray();
		// Iterate through input objects to see if any received a POST
		foreach ($this->inputArray as $input) {
			if ($input->postState == true)
				$this->postState = true;

		}
	}
}